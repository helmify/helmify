# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: PROD Build

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
### Build
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'
      - name: Set Build Version
        run: mvn versions:set -DgenerateBackupPoms=false -DremoveSnapshot=true
      - name: Store Release Version
        id: version
        run: |
          echo "resolved-version=$(mvn --quiet --non-recursive exec:exec -Dexec.executable=echo -Dexec.args='${project.version}')" >> "${GITHUB_OUTPUT}"
      - name: Build with Maven
        run: mvn -B clean test spring-boot:build-image --file pom.xml -Dspring-boot.build-image.imageName=helmify/helmify
      - name: Tag Image
        run: docker tag helmify/helmify:latest helmify/helmify:${{ steps.version.outputs.resolved-version }}
### Integration-Testing for generated Helm Charts
      - name: Start helmify
        run: docker run -d -p 8080:8080 -p 9090:9090 helmify/helmify:latest
      - name: wait for start
        run: |
          until printf "." && curl --silent http://localhost:9090/actuator/health; do \
            sleep 2; \
          done;
      - name: list all
        run: ls -lah
      - name: generate chart
        run: |
          curl -X POST --data @src/test/resources/pom-with-postgres.xml  -o helm.zip -H "Content-Type: application/json" "http://localhost:8080/api/cli?name=demo&version=0.0.1-SNAPSHOT"
      - name: container log
        run: docker logs $(docker ps -q --filter ancestor=helmify/helmify:latest)
      - name: unzip helm chart
        run: unzip helm.zip -d helm
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.1
      - name: helm dependency update
        run: cd helm/helm && helm dependency update
      - name: create cluster
        uses: helm/kind-action@v1.8.0
      - name: set context
        run: kubectl config use-context kind-chart-testing
      - name: helm install
        run: cd helm && helm install demo .
      - name: run cluster test
        run: mvn test -Dtest=KindClusterTest -Dexpected-deployments=demo -Dexpected-services=demo,demo-postgresql -Dexpected-pods=demo,demo-postgresql -Dexpected-configs=demo-config -Dexpected-secrets=demo,demo-postgresql
### Deploy
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push Docker Image
        run: docker push helmify/helmify:${{ steps.version.outputs.resolved-version }}
      - name: deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: ${{ secrets.DEPLOY_PORT }}
          script: |
            docker pull helmify/helmify:${{ steps.version.outputs.resolved-version }} &&
            docker tag helmify/helmify:${{ steps.version.outputs.resolved-version }} helmify/helmify:prod &&
            wget -O docker-compose.yml https://raw.githubusercontent.com/helmify/helmify/develop/docker-compose.yml &&
            docker compose up -d --force-recreate --no-deps helmify

    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    #- name: Update dependency graph
    #  uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
